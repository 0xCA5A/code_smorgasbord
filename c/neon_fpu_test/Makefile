SHELL := /bin/bash


DEFAULT_OPT_FLAGS=

SOFTFPU_OPT_FLAGS=
# -mfloat-abi=soft -msoft-float

MEDIUM_OPT_FLAGS=-O2 -pipe\
 -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -mfloat-abi=hard

FULL_OPT_FLAGS=-O3 -pipe\
-mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon \
-ftree-vectorize -mfloat-abi=hard \
-ffast-math -fsingle-precision-constant -funsafe-math-optimizations
#-fno-inline-functions

# http://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html
# 
# -mfpu=name
#     This specifies what floating-point hardware (or hardware emulation) is available on the target. Permissible names are: `vfp', `vfpv3', `vfpv3-fp16', `vfpv3-d16', `vfpv3-d16-fp16', `vfpv3xd', `vfpv3xd-fp16', `neon', `neon-fp16', `vfpv4', `vfpv4-d16', `fpv4-sp-d16', `neon-vfpv4', `fp-armv8', `neon-fp-armv8', and `crypto-neon-fp-armv8'.
# 
#     If -msoft-float is specified this specifies the format of floating-point values.
# 
#     If the selected floating-point hardware includes the NEON extension (e.g. -mfpu=`neon'), note that floating-point operations are not generated by GCC's auto-vectorization pass unless -funsafe-math-optimizations is also specified. This is because NEON hardware does not fully implement the IEEE 754 standard for floating-point arithmetic (in particular denormal values are treated as zero), so the use of NEON instructions may lead to a loss of precision. 


# [1] https://wiki.linaro.org/Linaro-arm-hardfloat
# [2] http://www.memetic.org/raspbian-benchmarking-armel-vs-armhf/
# [3] http://pandorawiki.org/Floating_Point_Optimization
# [4] http://wiki.debian.org/ArmHardFloatPort#Minimum_CPU_.26_FPU
# [5] http://raspberrypi.stackexchange.com/questions/1644/are-there-any-technical-limitations-when-running-hard-float-binaries-on-a-soft-f





CC=arm-linux-gnueabihf-gcc-4.6
# CC=arm-linux-gnueabi-gcc-4.4



SOURCE=code.c



all: default soft_fpu medium_optimized full_optimized
	@echo -e "using compiler: ${CC}"

# 	strip *.o

	@echo -e "\nfile info:"
	file *.o
# 	file *.asm
	
	@echo -e "\nnr of lines in asm files:"
	wc -l *.asm

	@echo -e "\nobject files:"
	ls -alt *.o

	@echo -e "\nrun time:"
	if [ x != x$$(uname -m | grep arm) ]; then \
		for obj in $$(ls *.o); do echo "run $${obj}:"; time ./$${obj} 1>/dev/null; echo -e "\n\n"; done; \
	fi

default: ${SOURCE}
	${CC} ${SOURCE} -S -o $@.asm ${DEFAULT_OPT_FLAGS}
	${CC} ${SOURCE} -o $@.o ${DEFAULT_OPT_FLAGS}

soft_fpu: ${SOURCE}
	${CC} ${SOURCE} -S -o $@.asm ${SOFTFPU_OPT_FLAGS}
	${CC} ${SOURCE} -o $@.o ${SOFTFPU_OPT_FLAGS}
	
medium_optimized: ${SOURCE}
	${CC} ${SOURCE} -S -o $@.asm ${MEDIUM_OPT_FLAGS}
	${CC} ${SOURCE} -o $@.o ${MEDIUM_OPT_FLAGS}

full_optimized:
	${CC} ${SOURCE} -S -o $@.asm ${FULL_OPT_FLAGS}
	${CC} ${SOURCE} -o $@.o ${FULL_OPT_FLAGS}

clean:
	rm -f *.o *.asm

